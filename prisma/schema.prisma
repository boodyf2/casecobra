generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    password      String?
    emailVerified DateTime?
    isAdmin       Boolean   @default(false)
    image         String?
    accounts      Account[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Order     Order[]
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model VerificationToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

enum CaseColor {
    black
    blue
    rose
}

enum PhoneModel {
    iphonex
    iphone11
    iphone12
    iphone13
    iphone14
    iphone15
    iphone16
}

enum CaseMaterial {
    silicone
    polycarbonate
}

enum CaseFinish {
    smooth
    textured
}

model Configuration {
    id              String        @id @default(cuid())
    width           Int
    height          Int
    imageUrl        String
    color           CaseColor?
    phoneModel      PhoneModel?
    caseMaterial    CaseMaterial?
    caseFinish      CaseFinish?
    croppedImageUrl String?
    Order           Order[]
}

enum OrderStatus {
    fulfilled
    shipped
    awaiting_shipment
}

model Order {
    id       String        @id @default(cuid())
    configId String
    config   Configuration @relation(fields: [configId], references: [id])
    userId   String
    user     User          @relation(fields: [userId], references: [id])
    amount   Float
    isPaid   Boolean       @default(false)
    status   OrderStatus   @default(awaiting_shipment)

    shippingAddressId String?
    shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
    billingAddress    BillingAddress?  @relation(fields: [billingAddressId], references: [id])
    billingAddressId  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ShippingAddress {
    id          String  @id @default(cuid())
    name        String
    street      String
    city        String
    postalCode  String
    country     String
    state       String?
    phoneNumber String
    orders      Order[]
}

model BillingAddress {
    id          String  @id @default(cuid())
    name        String
    street      String
    city        String
    postalCode  String
    country     String
    state       String?
    phoneNumber String
    orders      Order[]
}
